/***********************************************************************
SeededSliceExtractor - Wrapper class to map from the abstract
visualization algorithm interface to a templatized slice extractor
implementation.
Copyright (c) 2005-2024 Oliver Kreylos

This file is part of the 3D Data Visualizer (Visualizer).

The 3D Data Visualizer is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

The 3D Data Visualizer is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the 3D Data Visualizer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#define VISUALIZATION_WRAPPERS_SEEDEDSLICEEXTRACTOR_IMPLEMENTATION

#include <Wrappers/SeededSliceExtractor.h>

#include <Misc/SizedTypes.h>
#include <Misc/StdError.h>
#include <Misc/StandardMarshallers.h>
#include <Misc/StandardValueCoders.h>
#include <Geometry/GeometryMarshallers.h>
#include <Geometry/GeometryValueCoders.h>
#if VISUALIZATION_CONFIG_USE_COLLABORATION
#include <Collaboration2/DataType.icpp>
#endif

#include <Abstract/VariableManager.h>
#include <Abstract/ParametersSink.h>
#include <Abstract/ParametersSource.h>
#include <Templatized/SliceExtractorIndexedTriangleSet.h>
#include <Wrappers/ScalarExtractor.h>
#include <Wrappers/ElementSizeLimit.h>
#include <Wrappers/AlarmTimer.h>

namespace Visualization {

namespace Wrappers {

#if VISUALIZATION_CONFIG_USE_COLLABORATION

namespace {

/**************
Helper classes:
**************/

struct SeededSliceCollabParameters // Structure defining algorithm parameters exchanged with a shared visualization server
	{
	/* Elements: */
	public:
	Misc::UInt8 scalarVariableIndex;
	Misc::Float64 planeNormal[3];
	Misc::Float64 planeOffset;
	Misc::Float64 seedPoint[3];
	};

}

#endif

/*************************************************
Methods of class SeededSliceExtractor::Parameters:
*************************************************/

template <class DataSetWrapperParam>
inline
void
SeededSliceExtractor<DataSetWrapperParam>::Parameters::write(
	Visualization::Abstract::ParametersSink& sink) const
	{
	/* Write all parameters: */
	sink.writeScalarVariable("scalarVariable",scalarVariableIndex);
	sink.write("plane",Visualization::Abstract::Writer<Plane>(plane));
	sink.write("seedPoint",Visualization::Abstract::Writer<Point>(seedPoint));
	}

template <class DataSetWrapperParam>
inline
void
SeededSliceExtractor<DataSetWrapperParam>::Parameters::read(
	Visualization::Abstract::ParametersSource& source)
	{
	/* Read all parameters: */
	source.readScalarVariable("scalarVariable",scalarVariableIndex);
	source.read("plane",Visualization::Abstract::Reader<Plane>(plane));
	source.read("seedPoint",Visualization::Abstract::Reader<Point>(seedPoint));
	
	/* Update derived state: */
	update(source.getVariableManager(),true);
	}

#if VISUALIZATION_CONFIG_USE_COLLABORATION

template <class DataSetWrapperParam>
inline
void
SeededSliceExtractor<DataSetWrapperParam>::Parameters::write(
	void* parameters) const
	{
	/* Write current parameters to the given shared parameter object: */
	SeededSliceCollabParameters& params=*static_cast<SeededSliceCollabParameters*>(parameters);
	params.scalarVariableIndex=Misc::UInt8(scalarVariableIndex);
	for(int i=0;i<3;++i)
		params.planeNormal[i]=Misc::Float64(plane.getNormal()[i]);
	params.planeOffset=Misc::Float64(plane.getOffset());
	for(int i=0;i<3;++i)
		params.seedPoint[i]=Misc::Float64(seedPoint[i]);
	}

template <class DataSetWrapperParam>
inline
void
SeededSliceExtractor<DataSetWrapperParam>::Parameters::read(
	const void* parameters,
	Visualization::Abstract::VariableManager* variableManager)
	{
	/* Update current parameters from the given shared parameter object: */
	const SeededSliceCollabParameters& params=*static_cast<const SeededSliceCollabParameters*>(parameters);
	scalarVariableIndex=int(params.scalarVariableIndex);
	plane=Plane(typename Plane::Vector(params.planeNormal),params.planeOffset);
	for(int i=0;i<3;++i)
		seedPoint[i]=Scalar(params.seedPoint[i]);
	
	/* Update derived parameters state: */
	update(variableManager,true);
	}

#endif

template <class DataSetWrapperParam>
inline
void
SeededSliceExtractor<DataSetWrapperParam>::Parameters::update(
	Visualization::Abstract::VariableManager* variableManager,
	bool track)
	{
	/* Get a templatized locator to track the seed point: */
	const DataSetWrapper* myDataSet=dynamic_cast<const DataSetWrapper*>(variableManager->getDataSetByScalarVariable(scalarVariableIndex));
	if(myDataSet==0)
		throw Misc::makeStdErr(__PRETTY_FUNCTION__,"Mismatching data set type");
	dsl=myDataSet->getDs().getLocator();
	if(track)
		locatorValid=dsl.locatePoint(seedPoint);
	}

/*********************************************
Static elements of class SeededSliceExtractor:
*********************************************/

template <class DataSetWrapperParam>
const char* SeededSliceExtractor<DataSetWrapperParam>::name="Seeded Slice";

/*************************************
Methods of class SeededSliceExtractor:
*************************************/

template <class DataSetWrapperParam>
inline
const typename SeededSliceExtractor<DataSetWrapperParam>::DS*
SeededSliceExtractor<DataSetWrapperParam>::getDs(
	const Visualization::Abstract::DataSet* sDataSet)
	{
	/* Get a pointer to the data set wrapper: */
	const DataSetWrapper* myDataSet=dynamic_cast<const DataSetWrapper*>(sDataSet);
	if(myDataSet==0)
		throw Misc::makeStdErr(__PRETTY_FUNCTION__,"Mismatching data set type");
	
	return &myDataSet->getDs();
	}

template <class DataSetWrapperParam>
inline
const typename SeededSliceExtractor<DataSetWrapperParam>::SE&
SeededSliceExtractor<DataSetWrapperParam>::getSe(
	const Visualization::Abstract::ScalarExtractor* sScalarExtractor)
	{
	/* Get a pointer to the scalar extractor wrapper: */
	const ScalarExtractor* myScalarExtractor=dynamic_cast<const ScalarExtractor*>(sScalarExtractor);
	if(myScalarExtractor==0)
		throw Misc::makeStdErr(__PRETTY_FUNCTION__,"Mismatching scalar extractor type");
	
	return myScalarExtractor->getSe();
	}

template <class DataSetWrapperParam>
inline
SeededSliceExtractor<DataSetWrapperParam>::SeededSliceExtractor(
	Visualization::Abstract::VariableManager* sVariableManager,
	Cluster::MulticastPipe* sPipe)
	:Abstract::Algorithm(sVariableManager,sPipe),
	 parameters(getVariableManager()->getCurrentScalarVariable()),
	 sle(getDs(sVariableManager->getDataSetByScalarVariable(parameters.scalarVariableIndex)),getSe(sVariableManager->getScalarExtractor(parameters.scalarVariableIndex))),
	 currentSlice(0)
	{
	}

template <class DataSetWrapperParam>
inline
SeededSliceExtractor<DataSetWrapperParam>::~SeededSliceExtractor(
	void)
	{
	}

template <class DataSetWrapperParam>
inline
void
SeededSliceExtractor<DataSetWrapperParam>::readParameters(
	Visualization::Abstract::ParametersSource& source)
	{
	/* Read the current parameters: */
	parameters.read(source);
	
	/* Update extractor state: */
	sle.update(getDs(getVariableManager()->getDataSetByScalarVariable(parameters.scalarVariableIndex)),getSe(getVariableManager()->getScalarExtractor(parameters.scalarVariableIndex)));
	}

template <class DataSetWrapperParam>
inline
void
SeededSliceExtractor<DataSetWrapperParam>::setSeedLocator(
	const Visualization::Abstract::DataSet::Locator* seedLocator)
	{
	/* Get a pointer to the locator wrapper: */
	const Locator* myLocator=dynamic_cast<const Locator*>(seedLocator);
	if(myLocator==0)
		throw Misc::makeStdErr(__PRETTY_FUNCTION__,"Mismatching locator type");
	
	/* Calculate the seeding point and the slicing plane: */
	parameters.seedPoint=seedLocator->getPosition();
	parameters.plane=Plane(seedLocator->getOrientation().getDirection(1),parameters.seedPoint);
	
	/* Copy the locator: */
	parameters.dsl=myLocator->getDsl();
	parameters.locatorValid=myLocator->isValid();
	}

template <class DataSetWrapperParam>
inline
Visualization::Abstract::Element*
SeededSliceExtractor<DataSetWrapperParam>::createElement(
	Visualization::Abstract::Parameters* extractParameters)
	{
	/* Get proper pointer to parameter object: */
	Parameters* myParameters=dynamic_cast<Parameters*>(extractParameters);
	if(myParameters==0)
		throw Misc::makeStdErr(__PRETTY_FUNCTION__,"Mismatching parameter object type");
	int svi=myParameters->scalarVariableIndex;
	
	/* Create a new slice visualization element: */
	Slice* result=new Slice(getVariableManager(),myParameters,svi,getPipe());
	
	/* Update the slice extractor: */
	sle.update(getDs(getVariableManager()->getDataSetByScalarVariable(svi)),getSe(getVariableManager()->getScalarExtractor(svi)));
	
	/* Extract the slice into the visualization element: */
	sle.startSeededSlice(myParameters->dsl,myParameters->plane,result->getSurface());
	ElementSizeLimit<Slice> esl(*result,~size_t(0));
	sle.continueSeededSlice(esl);
	sle.finishSeededSlice();
	
	/* Return the result: */
	return result;
	}

template <class DataSetWrapperParam>
inline
Visualization::Abstract::Element*
SeededSliceExtractor<DataSetWrapperParam>::startElement(
	Visualization::Abstract::Parameters* extractParameters)
	{
	/* Get proper pointer to parameter object: */
	Parameters* myParameters=dynamic_cast<Parameters*>(extractParameters);
	if(myParameters==0)
		throw Misc::makeStdErr(__PRETTY_FUNCTION__,"Mismatching parameter object type");
	int svi=myParameters->scalarVariableIndex;
	
	/* Create a new slice visualization element: */
	currentSlice=new Slice(getVariableManager(),myParameters,svi,getPipe());
	
	/* Update the slice extractor: */
	sle.update(getDs(getVariableManager()->getDataSetByScalarVariable(svi)),getSe(getVariableManager()->getScalarExtractor(svi)));
	
	/* Start extracting the slice into the visualization element: */
	sle.startSeededSlice(myParameters->dsl,myParameters->plane,currentSlice->getSurface());
	
	/* Return the result: */
	return currentSlice.getPointer();
	}

template <class DataSetWrapperParam>
inline
bool
SeededSliceExtractor<DataSetWrapperParam>::continueElement(
	const Realtime::AlarmTimer& alarm)
	{
	/* Continue extracting the slice into the visualization element: */
	AlarmTimer atcf(alarm);
	return sle.continueSeededSlice(atcf);
	}

template <class DataSetWrapperParam>
inline
void
SeededSliceExtractor<DataSetWrapperParam>::finishElement(
	void)
	{
	sle.finishSeededSlice();
	currentSlice=0;
	}

template <class DataSetWrapperParam>
inline
Visualization::Abstract::Element*
SeededSliceExtractor<DataSetWrapperParam>::startSlaveElement(
	Visualization::Abstract::Parameters* extractParameters)
	{
	if(isMaster())
		throw Misc::makeStdErr(__PRETTY_FUNCTION__,"Cannot be called on master node");
	
	/* Get proper pointer to parameter object: */
	Parameters* myParameters=dynamic_cast<Parameters*>(extractParameters);
	if(myParameters==0)
		throw Misc::makeStdErr(__PRETTY_FUNCTION__,"Mismatching parameter object type");
	
	/* Create a new slice visualization element: */
	currentSlice=new Slice(getVariableManager(),myParameters,myParameters->scalarVariableIndex,getPipe());
	
	return currentSlice.getPointer();
	}

template <class DataSetWrapperParam>
inline
void
SeededSliceExtractor<DataSetWrapperParam>::continueSlaveElement(
	void)
	{
	if(isMaster())
		throw Misc::makeStdErr(__PRETTY_FUNCTION__,"Cannot be called on master node");
	
	currentSlice->getSurface().receive();
	}

#if VISUALIZATION_CONFIG_USE_COLLABORATION

template <class DataSetWrapperParam>
inline
Collab::DataType::TypeID
SeededSliceExtractor<DataSetWrapperParam>::createClassParametersType(
	Collab::DataType& dataType)
	{
	/* Register the collaboration parameters type: */
	Collab::DataType::TypeID floatType=Collab::DataType::getAtomicType<Misc::Float64>();
	Collab::DataType::TypeID float3Type=dataType.createFixedArray(3,floatType);
	Collab::DataType::StructureElement collabParametersElements[]=
		{
		{Collab::DataType::getAtomicType<Misc::UInt8>(),offsetof(SeededSliceCollabParameters,scalarVariableIndex)},
		{float3Type,offsetof(SeededSliceCollabParameters,planeNormal)},
		{floatType,offsetof(SeededSliceCollabParameters,planeOffset)},
		{float3Type,offsetof(SeededSliceCollabParameters,seedPoint)}
		};
	Collab::DataType::TypeID collabParametersType=dataType.createStructure(4,collabParametersElements,sizeof(SeededSliceCollabParameters));
	
	return collabParametersType;
	}

#endif

}

}
